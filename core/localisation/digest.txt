Directory structure:
└── localisation/
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── models.py
    ├── serializers.py
    ├── tests.py
    ├── urls.py
    ├── views.py
    └── migrations/
        ├── 0001_initial.py
        └── __init__.py

================================================
File: __init__.py
================================================



================================================
File: admin.py
================================================
# localisation/admin.py
from django.contrib import admin
from core.localisation.models import Pays, Region, Ville

class VilleInline(admin.TabularInline):
    model = Ville
    extra = 0

class RegionInline(admin.TabularInline):
    model = Region
    extra = 0

@admin.register(Pays)
class PaysAdmin(admin.ModelAdmin):
    list_display = ('nom', 'code_iso')
    search_fields = ('nom', 'code_iso')
    inlines = [RegionInline]

@admin.register(Region)
class RegionAdmin(admin.ModelAdmin):
    list_display = ('nom', 'code', 'pays')
    list_filter = ('pays',)
    search_fields = ('nom', 'code')
    inlines = [VilleInline]

@admin.register(Ville)
class VilleAdmin(admin.ModelAdmin):
    list_display = ('nom', 'region', 'code_postal')
    list_filter = ('region', 'region__pays')
    search_fields = ('nom', 'code_postal')


================================================
File: apps.py
================================================
from django.apps import AppConfig


class LocalisationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core.localisation'
    label = 'core_localisation'



================================================
File: models.py
================================================
from django.db import models

# Create your models here.
from django.db import models
import uuid

class Pays(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    nom = models.CharField(max_length=100, unique=True)
    code_iso = models.CharField(max_length=3, unique=True)
    
    class Meta:
        verbose_name = "Pays"
        verbose_name_plural = "Pays"
        ordering = ['nom']
    
    def __str__(self):
        return self.nom

class Region(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    nom = models.CharField(max_length=100, unique=True)
    code = models.CharField(max_length=10, unique=True)
    pays = models.ForeignKey(Pays, on_delete=models.CASCADE)
    description = models.TextField(blank=True)
    
    class Meta:
        verbose_name = "RÃ©gion"
        verbose_name_plural = "RÃ©gions"
        ordering = ['nom']
    
    def __str__(self):
        return f"{self.nom} ({self.pays.nom})"

class Ville(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    nom = models.CharField(max_length=100)
    region = models.ForeignKey(Region, on_delete=models.CASCADE)
    code_postal = models.CharField(max_length=10, blank=True)
    
    class Meta:
        verbose_name = "Ville"
        verbose_name_plural = "Villes"
        ordering = ['nom']
        unique_together = ['nom', 'region']
    
    def __str__(self):
        return f"{self.nom} ({self.region.nom})"


================================================
File: serializers.py
================================================
# localisation/serializers.py
from rest_framework import serializers
from core.localisation.models import Pays, Region, Ville

class PaysSerializer(serializers.ModelSerializer):
    class Meta:
        model = Pays
        fields = '__all__'
        read_only_fields = ('id',)

class RegionSerializer(serializers.ModelSerializer):
    pays = PaysSerializer(read_only=True)
    
    class Meta:
        model = Region
        fields = '__all__'
        read_only_fields = ('id',)

class VilleSerializer(serializers.ModelSerializer):
    region = RegionSerializer(read_only=True)
    
    class Meta:
        model = Ville
        fields = ['id', 'nom', 'region', 'code_postal']
        read_only_fields = ('id',)

class VilleDetailSerializer(VilleSerializer):
    region = RegionSerializer()
    pays = serializers.SerializerMethodField()
    
    def get_pays(self, obj):
        return PaysSerializer(obj.region.pays).data
    
    class Meta(VilleSerializer.Meta):
        fields = VilleSerializer.Meta.fields + ['pays']




================================================
File: tests.py
================================================
from django.test import TestCase

# Create your tests here.



================================================
File: urls.py
================================================
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from core.localisation import views

router = DefaultRouter()
router.register(r'pays', views.PaysViewSet, basename='pays')
router.register(r'regions', views.RegionViewSet, basename='region')
router.register(r'villes', views.VilleViewSet, basename='ville')

urlpatterns = [
    path('', include(router.urls)),
]


================================================
File: views.py
================================================
# localisation/views.py
from rest_framework import viewsets, permissions, filters
from django_filters.rest_framework import DjangoFilterBackend
from core.localisation.models import Pays, Region, Ville
from core.localisation.serializers import (
    PaysSerializer,
    RegionSerializer,
    VilleSerializer,
    VilleDetailSerializer
)

class PaysViewSet(viewsets.ModelViewSet):
    queryset = Pays.objects.all()
    serializer_class = PaysSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]
    filter_backends = [filters.SearchFilter, filters.OrderingFilter]
    search_fields = ['nom', 'code_iso']
    ordering_fields = ['nom', 'code_iso']
    ordering = ['nom']

class RegionViewSet(viewsets.ModelViewSet):
    serializer_class = RegionSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter]
    filterset_fields = ['pays']
    search_fields = ['nom', 'code']

    def get_queryset(self):
        queryset = Region.objects.all()
        pays_id = self.request.query_params.get('pays')
        if pays_id:
            queryset = queryset.filter(pays__id=pays_id)
        return queryset

class VilleViewSet(viewsets.ModelViewSet):
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter]
    filterset_fields = ['region']
    search_fields = ['nom', 'code_postal']

    def get_serializer_class(self):
        if self.action == 'retrieve':
            return VilleDetailSerializer
        return VilleSerializer

    def get_queryset(self):
        queryset = Ville.objects.all()
        region_id = self.request.query_params.get('region')
        if region_id:
            queryset = queryset.filter(region__id=region_id)
        return queryset


================================================
File: migrations/0001_initial.py
================================================
# Generated by Django 5.2.3 on 2025-06-20 11:16

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Pays',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('code_iso', models.CharField(max_length=3, unique=True)),
            ],
            options={
                'verbose_name': 'Pays',
                'verbose_name_plural': 'Pays',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('pays', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_localisation.pays')),
            ],
            options={
                'verbose_name': 'RÃ©gion',
                'verbose_name_plural': 'RÃ©gions',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Ville',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
                ('code_postal', models.CharField(blank=True, max_length=10)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_localisation.region')),
            ],
            options={
                'verbose_name': 'Ville',
                'verbose_name_plural': 'Villes',
                'ordering': ['nom'],
                'unique_together': {('nom', 'region')},
            },
        ),
    ]



================================================
File: migrations/__init__.py
================================================


